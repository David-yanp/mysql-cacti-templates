#summary A project to create data queries easily

Data queries are poorly documented at http://www.cacti.net/downloads/docs/html/data_queries.html and pretty abstract, so they're kind of hard to grasp.  This page is about extending the Better Cacti Templates to include data queries, so they become easy and simple.

= Data Queries =

Sometimes you have more than one of something to graph.  For example, you have more than one network interface, or more than one MySQL server running on a host.  You want to create a separate set of graphs for each of these.

There are two steps to this process.  First, a data query must look for the instances and display a unique identifier (such as the port number or the interface name).  Second, you create graphs for them.  When the poller fetches data for the graphs, it specifies the identifier so the data is retrieved from the correct place.

Creating templates to support this functionality is what the rest of this page is about.

= Parts of a Data Query =

There are several parts to a data query.

*The definition within Cacti*  Click on Data Queries in the Console view's left-hand pane.  Use "Unix - Get Mounted Partitions" as an example.  This has a few properties:
  * Name, Description - self-explanatory.
  * XML Path - The path to the XML file that describes how the query is executed and what it returns.
  * Data Input Method - for our purposes, always Get Script Data (indexed).

Then some graph templates are associated with the data query.

= How to Invoke a Data Query =

There are three main ways to invoke a data query: *index*, *query*, *get*.

*index* returns the identifiers that are found, one per line.  For example, on my machine,

{{{
perl query_unix_partitions.pl index
/dev/mapper/VolGroup00-LogVol00
/dev/hda1
}}}

*query* queries each resource that exists, e.g. you can see that /dev/hda1 is 25% full.

{{{
perl query_unix_partitions.pl query percent
/dev/mapper/VolGroup00-LogVol00:53
/dev/hda1:25
}}}

*get* gets a single value for a single device:

{{{
perl query_unix_partitions.pl get percent /dev/hda1
25
}}}

As far as I can see, there's no real requirement that the data query and the means of fetching the data have to be the same script file, but it's simpler to do that way.  I also don't think the 'query' method needs to be implemented, because I can't see what it is used for.

= Improvements =

We can make a number of improvements to this system.  We don't have much flexibility to change how the scripts are queried and so on, but we can see already that to query various properties of a single disk, we'll have to make multiple calls to the resource.  This is an inefficient way to do things.  Similarly, caching can help here too.  What we should probably do when 'get' is called, is build a cache file from 'index' and then each 'get' call can read from the cache file.

The script will recognize 'magic_dq_key' as the magically named primary key for data queries.  So if we have

{{{
ss_get_by_ssh --query query --items a0,a1,a2 --query_key /dev/hda1 ....
}}}

It will return only the line for the item whose magic_dq_key=/dev/hda1.

The XML file should also allow us to pass index|query|get as an argument to an option, instead of a word by itself, so we can say "--query=index" or something like that.

= Template =

The template will generally look like this (the contents of each element is folded):

{{{
<cacti>
   <hash_0400168ffa36c1864124b38bcda2ae9bd61f46>
+--- 37 lines: <name>Unix - Get Mounted Partitions</name>
   </hash_0400168ffa36c1864124b38bcda2ae9bd61f46>
   <hash_03001680e9e4c4191a5da189ae26d0e237f015>
+--- 41 lines: <name>Get Script Data (Indexed)</name>----
   </hash_03001680e9e4c4191a5da189ae26d0e237f015>
   <hash_0000168e7c8a511652fe4a8e65c69f3d34779d>
+---211 lines: <name>Unix - Available Disk Space</name>--
   </hash_0000168e7c8a511652fe4a8e65c69f3d34779d>
   <hash_010016e4ac6919d4f6f21ec5b281a1d6ac4d4e>
+--- 59 lines: <name>Unix - Hard Drive Space</name>------
   </hash_010016e4ac6919d4f6f21ec5b281a1d6ac4d4e>
</cacti>
}}}

The first element is the data query itself:

{{{
   <hash_0400168ffa36c1864124b38bcda2ae9bd61f46>
      <name>Unix - Get Mounted Partitions</name>
      <description>Queries a list of mounted partitions on a unix-based host with the</description> 
      <xml_path>&lt;path_cacti&gt;/resource/script_queries/unix_disk.xml</xml_path>
      <data_input_id>hash_03001680e9e4c4191a5da189ae26d0e237f015</data_input_id>
      <graphs>
+---- 31 lines: <hash_110016a0b3e7b63c2e66f9e1ea24a16ff245fc>----
      </graphs>
   </hash_0400168ffa36c1864124b38bcda2ae9bd61f46>
}}}

The data_input_id matches the Get Script Data (Indexed) hash, by the way.